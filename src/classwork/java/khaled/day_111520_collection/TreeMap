Java TreeMap class:
===================

Java TreeMap class is a red-black tree based implementation. It provides an efficient means of storing key-value pairs in sorted order.

The important points about Java TreeMap class are:

    Java TreeMap contains values based on the key. It implements the NavigableMap interface and extends AbstractMap class.
    Java TreeMap contains only unique elements.
    Java TreeMap cannot have a null key but can have multiple null values.
    Java TreeMap is non synchronized.
    Java TreeMap maintains ascending order.


Constructors of Java TreeMap class:
------------------------------------
Constructor	                                    Description
-----------------------------------------       ----------------------------------------------------------
TreeMap()	                                    It is used to construct an empty tree map that will be sorted using the natural order
                                                of its key.
TreeMap(Comparator<? super K> comparator)	    It is used to construct an empty tree-based map that will be sorted using the comparator comp.
TreeMap(Map<? extends K,? extends V> m)	        It is used to initialize a treemap with the entries from m, which will be sorted using the
                                                natural order of the keys.
TreeMap(SortedMap<K,? extends V> m)	            It is used to initialize a treemap with the entries from the SortedMap sm, which will be
                                                sorted in the same order as sm.






Java TreeMap Example:
---------------------
    import java.util.*;
    class TreeMap1{
     public static void main(String args[]){
       TreeMap<Integer,String> map=new TreeMap<Integer,String>();
          map.put(100,"Amit");
          map.put(102,"Ravi");
          map.put(101,"Vijay");
          map.put(103,"Rahul");

          for(Map.Entry m:map.entrySet()){
           System.out.println(m.getKey()+" "+m.getValue());
          }
     }
    }



 Java TreeMap Example: remove():
 -------------------------------
     import java.util.*;
     public class TreeMap2 {
        public static void main(String args[]) {
         TreeMap<Integer,String> map=new TreeMap<Integer,String>();
           map.put(100,"Amit");
           map.put(102,"Ravi");
           map.put(101,"Vijay");
           map.put(103,"Rahul");
           System.out.println("Before invoking remove() method");
           for(Map.Entry m:map.entrySet())
           {
               System.out.println(m.getKey()+" "+m.getValue());
           }
           map.remove(102);
           System.out.println("After invoking remove() method");
           for(Map.Entry m:map.entrySet())
           {
               System.out.println(m.getKey()+" "+m.getValue());
           }
           }
     }


Java TreeMap Example: Book:
----------------------------
    import java.util.*;
    class Book {
        int id;
        String name,author,publisher;
        int quantity;
        public Book(int id, String name, String author, String publisher, int quantity) {
            this.id = id;
            this.name = name;
            this.author = author;
            this.publisher = publisher;
            this.quantity = quantity;
        }
    }

    public class MapExample {
        public static void main(String[] args) {
            //Creating map of Books
            Map<Integer,Book> map=new TreeMap<Integer,Book>();
            //Creating Books
            Book b1=new Book(101,"Let us C","Yashwant Kanetkar","BPB",8);
            Book b2=new Book(102,"Data Communications & Networking","Forouzan","Mc Graw Hill",4);
            Book b3=new Book(103,"Operating System","Galvin","Wiley",6);
            //Adding Books to map
            map.put(2,b2);
            map.put(1,b1);
            map.put(3,b3);

            //Traversing map
            for(Map.Entry<Integer, Book> entry:map.entrySet()){
                int key=entry.getKey();
                Book b=entry.getValue();
                System.out.println(key+" Details:");
                System.out.println(b.id+" "+b.name+" "+b.author+" "+b.publisher+" "+b.quantity);
            }
        }
    }